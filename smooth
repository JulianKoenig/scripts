#! /bin/bash
# smooth (BASH script) -- git/svn/hg wrapper
#
# see [instructions](doc/s for smooth source control.md)

SELF=$(basename $0)


git_commit()
{
  set -e

  b=$(git branch | sed -n 's/^\* \(.*\)/\1/p')
  b_remote=$(git config --get "branch.$b.remote")
  
  git commit -a && git push $b_remote $b
}


# *** MAINLINE ***
declare -A r_git r_svn r_hg
. $(dirname "$0")/_s.sh
r_git[commit]=git_commit
r_git[c]=git_commit
r_svn[status]="svn status"
r_svn[s]="svn status"
r_git[status]="git status"
r_git[s]="git status"
r_hg[status]="hg status"
r_hg[s]="hg status"

## set -x

# determine arg, i.e. which smooth subcommand to run
case $SELF in
  s|smooth)
    if [ $# = 0 ] ; then
      arg=status
    else
      arg=$1 
      shift
    fi
    ;;
  s-*) arg=${SELF#s-} ;;
  *)
    echo "$SELF: ERROR: run as unknown name" >&2
    exit 4
    ;;
esac

# determine repository type
if [ -d .svn ] ; then
  rtype=svn
else
  d=$PWD
  while [ "$d" != / ] ; do
    if [ -d "$d"/.git ] ; then
      rtype=git
      break
    fi
    d=$(dirname "$d")
  done
fi
if [ -z "$rtype" ] ; then
  ## echo "$SELF: WARNING: no revision control directory found in $PWD or parents" >&2
  echo "$SELF: ERROR: no revision control directory found in $PWD or parents" >&2
  exit 3
fi

if [ -z "$(eval echo \${r_$rtype[$arg]})" ] ; then
  echo "$SELF: ERROR: operation '$arg' not supported for $rtype" >&2
  exit 4
fi
eval echo \${r_$rtype[$arg]}
## echo "(${r_svn[sl]})"
