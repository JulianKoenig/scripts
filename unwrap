#! /usr/bin/python
# unwrap (Python script) -- removes soft line breaks
#
# Version:   0.5
# Copyright: (c)2015 Alastair Irvine <alastair@plug.org.au>
# Keywords:  qp text
# Licence:   This file is released under the GNU General Public License
#
'''Description:
  
Usage: 
Options:
  
'''
# Licence details:
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or (at
#     your option) any later version.
#
#     See http://www.gnu.org/licenses/gpl-2.0.html for more information.
#
#     You can find the complete text of the GPLv2 in the file
#     /usr/share/common-licenses/GPL-2 on Debian systems.
#     Or see the file COPYING in the same directory as this program.
#
#
# TO-DO:
#   + support stdin

import sys
import getopt
import quopri
import StringIO


self="unwrap"
allowed_options='hdq'
allowed_long_options=['help']


# *** CLASSES ***
class Output(object):
    "Collects a list of lines, and outputs them (joined by a space) when required."


    def __init__(self):
        self.lines = []


    def addline(self, line):
        self.lines.append(line)


    def flush(self):
        """Returns a paragraph with a newline appended, or an empty string if no
        lines are present."""
        s = ""
        if self.lines:
            s = " ".join(self.lines) + "\n"
        self.lines = []

        return s



# *** FUNCTIONS ***
def show_help(dest=sys.stdout):
    print >> dest, __doc__,


def report_error(*msg):
    print >> sys.stderr, self + ": Error:", msg


def report_warning(*msg):
    print >> sys.stderr, self + ": Warning:", msg


def report_notice(*msg):
    print >> sys.stderr, self + ": Notice:", msg


def process_regular(f):
    o = Output()
    text = ""

    for line in f.readlines():
        s = line.rstrip()
        if s == "":
            text += o.flush() + "\n"
        else:
            o.addline(s)

    return text + o.flush()


def process_quopri(f):
    b = StringIO.StringIO()
    quopri.decode(f, b)
    b.seek(0)
    ## print len(b.getvalue())
    return process_regular(b)


# *** MAINLINE ***
if __name__ == '__main__':
    # == Command-line parsing ==
    # -- defaults --
    debug = 0

    # -- option handling --
    try:
        optlist, args = getopt.getopt(sys.argv[1:], allowed_options, allowed_long_options)
    except getopt.GetoptError, e:
        report_error(e)
        sys.exit(1)

    # Create a special dict object that defaults to False for unspecified options
    from collections import defaultdict
    params = defaultdict(bool)

    for option, opt_arg in optlist:
        if option == "-q":
            params["quopri"] = True
        elif option == "-d":
            debug += 1
        elif option == "-h" or option == "--help":
            show_help()
            sys.exit(0)

    # -- argument checking --
    ## if len(args) not in (2, 3):
    ##     report_error("Invalid command-line parameters.")
    ##     show_help(sys.stderr)
    ##     sys.exit(1)

    # -- argument handling --
    if len(args) == 0:
        report_error("stdin not supported")
        sys.exit(2)
    else:
        for filename in args:
            f = open(filename)
            if params["quopri"]:
                print process_quopri(f)
            else:
                print process_regular(f)



    # == sanity checking ==


    # == preparation ==


    # == processing ==
